/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.unige.urbantraffic.visualizer.manager.api.v1.interfaces;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.unige.urbantraffic.visualizer.manager.model.v1.Errors;
import com.unige.urbantraffic.visualizer.manager.model.v1.Simulation;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.io.IOException;
import java.util.Optional;

@Api(value = "v1", description = "the v1 API")
public interface UrbanTrafficVisualizerManagerApiV1 {

    Logger log = LoggerFactory.getLogger(UrbanTrafficVisualizerManagerApiV1.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Methods called by visualize in order to render current simulation", nickname = "renderSimulation", notes = "Method called by visualize in order to render current simulation", response = Simulation.class, tags={ "Render API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Response with simulation", response = Simulation.class),
        @ApiResponse(code = 400, message = "The request was invalid or cannot be otherwise served.", response = Errors.class),
        @ApiResponse(code = 404, message = "The device or Touchpoint is not configured", response = Errors.class),
        @ApiResponse(code = 500, message = "Something is broken.", response = Errors.class),
        @ApiResponse(code = 503, message = "The server is up, but overloaded with requests. Try again later.", response = Errors.class) })
    @RequestMapping(value = "/v1/render",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    default ResponseEntity<Simulation> renderSimulation(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile domain,@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile initialConditions,@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile simulationOutput) throws IOException {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"links\" : [ {    \"associatedJunctions\" : [ \"associatedJunctions\", \"associatedJunctions\" ],    \"linkId\" : \"linkId\",    \"capacity\" : 0.8008282  }, {    \"associatedJunctions\" : [ \"associatedJunctions\", \"associatedJunctions\" ],    \"linkId\" : \"linkId\",    \"capacity\" : 0.8008282  } ],  \"plannerResult\" : [ {    \"junctionOccupancy\" : [ {      \"occupancy\" : 5.962134,      \"junctionId\" : \"junctionId\"    }, {      \"occupancy\" : 5.962134,      \"junctionId\" : \"junctionId\"    } ],    \"directions\" : [ {      \"numOfMovingCars\" : 5,      \"junctionId\" : \"junctionId\",      \"from\" : \"from\",      \"to\" : \"to\"    }, {      \"numOfMovingCars\" : 5,      \"junctionId\" : \"junctionId\",      \"from\" : \"from\",      \"to\" : \"to\"    } ],    \"switchPhase\" : {      \"junctionId\" : \"junctionId\",      \"stageId\" : \"stageId\"    },    \"linksOccupancy\" : [ {      \"linkId\" : \"linkId\",      \"occupancy\" : 1.4658129    }, {      \"linkId\" : \"linkId\",      \"occupancy\" : 1.4658129    } ],    \"instant\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"junctionOccupancy\" : [ {      \"occupancy\" : 5.962134,      \"junctionId\" : \"junctionId\"    }, {      \"occupancy\" : 5.962134,      \"junctionId\" : \"junctionId\"    } ],    \"directions\" : [ {      \"numOfMovingCars\" : 5,      \"junctionId\" : \"junctionId\",      \"from\" : \"from\",      \"to\" : \"to\"    }, {      \"numOfMovingCars\" : 5,      \"junctionId\" : \"junctionId\",      \"from\" : \"from\",      \"to\" : \"to\"    } ],    \"switchPhase\" : {      \"junctionId\" : \"junctionId\",      \"stageId\" : \"stageId\"    },    \"linksOccupancy\" : [ {      \"linkId\" : \"linkId\",      \"occupancy\" : 1.4658129    }, {      \"linkId\" : \"linkId\",      \"occupancy\" : 1.4658129    } ],    \"instant\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"junctions\" : [ {    \"isControlled\" : true,    \"controlledBy\" : [ \"controlledBy\", \"controlledBy\" ],    \"junctionId\" : \"junctionId\",    \"associatedLinks\" : [ \"associatedLinks\", \"associatedLinks\" ]  }, {    \"isControlled\" : true,    \"controlledBy\" : [ \"controlledBy\", \"controlledBy\" ],    \"junctionId\" : \"junctionId\",    \"associatedLinks\" : [ \"associatedLinks\", \"associatedLinks\" ]  } ]}", Simulation.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default V1Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
